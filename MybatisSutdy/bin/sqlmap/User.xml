<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace：命名空间，用于隔离sql，还有一个很重要的作用，后面会讲 -->
<mapper namespace="User">
<!-- id:statement的id 或者叫做sql的id-->
	<!-- parameterType:声明输入参数的类型 -->
	<!-- resultType:声明输出结果的类型，应该填写pojo的全路径 -->
	<!-- #{}：输入参数的占位符，相当于jdbc的？ -->
	<select id="queryUserById" parameterType="Integer" resultType="com.xx.pojo.User">
		SELECT * FROM user WHERE id  = #{id}
	</select>
	
	<select id="queryUserByUsername" parameterType="String" resultType="com.xx.pojo.User">
		<!-- SELECT * FROM user WHERE username LIKE '%${value}%' -->
		<!-- SELECT * FROM user WHERE username LIKE "%"#{value}"%" 防sql语句注入 -->
		SELECT * FROM user WHERE username = #{value}
	</select>
	
	<insert id="insertUser" parameterType="com.xx.pojo.User">
		<selectKey keyProperty="id" resultType="Integer" order="AFTER">
			SELECT LAST_INSERT_ID()
		</selectKey>
		INSERT INTO user (username, birthday, sex, address) VALUE 
		(#{username}, #{birthday}, #{sex}, #{address})
	</insert>
	
	<update id="updateUser" parameterType="com.xx.pojo.User">
		UPDATE  user SET address = #{address} WHERE id = 27
	</update>
	
	<delete id="deleteUserByUsername" parameterType="String">
		Delete FROM user WHERE username = #{username}
	</delete>
</mapper>